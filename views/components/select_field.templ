package components

type SelectFieldOption struct {
	Value    string
	Label    string
	Selected bool
}

type SelectFieldProps struct {
	Label       string
	LabelRight  func() templ.Component
	DivClass    string
	SubDivClass string
	Class       string
	Id          string
	Error       string
	Options     []SelectFieldOption
	Placeholder string
	Readonly    bool
	Value       string
	Extra       map[string]interface{}
	OnChange    templ.ComponentScript
}

templ SelectField(props SelectFieldProps) {
	<div class={ props.DivClass }>
		if props.Label != "" {
			@Label(LabelProps{
				Id:         props.Id,
				Label:      props.Label,
				LabelRight: props.LabelRight,
			})
		}
		<div class={ "mt-1 flex w-full " + props.SubDivClass }>
			<select
				class={ "flex h-10 w-full bg-white/5 text-white rounded-md accent-white border border-zinc-300/20 px-2 text-sm focus:ring-2 focus:ring-inset focus:ring-ferdinand-500 disabled:cursor-not-allowed disabled:opacity-50 " + props.Class }
				readonly?={ props.Readonly }
				id={ props.Id }
				name={ props.Id }
				placeholder={ props.Placeholder }
				onChange={ props.OnChange }
				{ props.Extra... }
			>
				for _, option := range props.Options {
					<option
						value={ option.Value }
						selected?={ option.Selected }
						if option.Value == props.Value {
							selected="selected"
						}
					>
						{ option.Label }
					</option>
				}
			</select>
			{ children... }
		</div>
		if props.Error != "" {
			<p class="text-sm text-red-500 mt-1">{ props.Error }</p>
		}
	</div>
}
