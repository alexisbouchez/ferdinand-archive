package components

import "ferdinand/views/util"

templ Code() {
	<script type="module">
    import { codeToHtml } from 'https://esm.sh/shiki@1.0.0'

	const codeSnippetsData = {
		shellscript: `curl https://console.ferdinand.email/api/v1/emails \\\n\t-H "Authorization: Bearer <api_key>" \\\n\t-H "Content-Type: application/json" \\\n\t-X POST \\\n\t-d $'\n      {\n        "from": "dagny@taggart.com",\n        "to": "henry@rearden.com",\n        "subject": "Urgent Meeting Request: Collaboration Opportunity",\n        "text": "Dear Henry, ...",\n        "html": "Dear <b>Henry</b>, ..."\n      }'\n`,
		python: `import requests\n\nurl = "https://console.ferdinand.email/api/v1/emails"\nheaders = {\n    "Authorization": "Bearer <api_key>",\n    "Content-Type": "application/json"\n}\npayload = {\n    "from": "dagny@taggart.com",\n    "to": "henry@rearden.com",\n    "subject": "Urgent Meeting Request: Collaboration Opportunity",\n    "text": "Dear Henry, ...",\n    "html": "Dear <b>Henry</b>, ..."\n}\n\nresponse = requests.post(url, json=payload, headers=headers)\n\nprint(response.status_code)\nprint(response.json())\n\n`,
		typescript: `import * as https from 'https';\n\nconst data = JSON.stringify({\n  from: 'dagny@taggart.com',\n  to: 'henry@rearden.com',\n  subject: 'Urgent Meeting Request: Collaboration Opportunity',\n  text: 'Dear Henry, ...',\n  html: 'Dear <b>Henry</b>, ...'\n});\n\nconst options = {\n  hostname: 'console.ferdinand.email',\n  path: '/api/v1/emails',\n  method: 'POST',\n  headers: {\n    'Authorization': 'Bearer <api_key>',\n    'Content-Type': 'application/json',\n    'Content-Length': data.length\n  }\n};\n\nconst req = https.request(options, (res) => {\n  let responseBody = '';\n\n  res.on('data', (chunk) => {\n    responseBody += chunk;\n  });\n\n  res.on('end', () => {\n    console.log(res.statusCode);\n    console.log(responseBody);\n  });\n});\n\nreq.on('error', (error) => {\n  console.error(error);\n});\n\nreq.write(data);\nreq.end();\n\n`,
		go: `package main\n\nimport (\n    "bytes"\n    "encoding/json"\n    "fmt"\n    "net/http"\n)\n\nfunc main() {\n    url := "https://console.ferdinand.email/api/v1/emails"\n    payload := map[string]string{\n        "from":    "dagny@taggart.com",\n        "to":      "henry@rearden.com",\n        "subject": "Urgent Meeting Request: Collaboration Opportunity",\n        "text":    "Dear Henry, ...",\n        "html":    "Dear <b>Henry</b>, ...",\n    }\n    jsonData, err := json.Marshal(payload)\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n\n    req, err := http.NewRequest("POST", url, bytes.NewBuffer(jsonData))\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n    req.Header.Set("Authorization", "Bearer <api_key>")\n    req.Header.Set("Content-Type", "application/json")\n\n    client := &http.Client{}\n    resp, err := client.Do(req)\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n    defer resp.Body.Close()\n\n    fmt.Println("Response Status:", resp.Status)\n}\n\n`,
		php: `<?php\n\n$url = 'https://console.ferdinand.email/api/v1/emails';\n$headers = [\n    'Authorization: Bearer <api_key>',\n    'Content-Type: application/json'\n];\n$data = [\n    'from' => 'dagny@taggart.com',\n    'to' => 'henry@rearden.com',\n    'subject' => 'Urgent Meeting Request: Collaboration Opportunity',\n    'text' => 'Dear Henry, ...',\n    'html' => 'Dear <b>Henry</b>, ...'\n];\n\n$options = [\n    'http' => [\n        'header'  => implode("\\r\\n", $headers),\n        'method'  => 'POST',\n        'content' => json_encode($data)\n    ]\n];\n\n$context  = stream_context_create($options);\n$result = file_get_contents($url, false, $context);\n\nif ($result === FALSE) {\n    // Handle error\n}\n\nvar_dump($result);\n?>\n\n`,
	};

    const codeSnippets = document.querySelectorAll('#code-snippet')
    for (const codeSnippet of codeSnippets) {
      const lang = codeSnippet.getAttribute('data-lang')
	  let code = codeSnippetsData[lang]
	  code = code.replace(
		'henry@rearden.com', 
		document.getElementById('emails-code').getAttribute('data-user-email')
	  )
	  code = code.replace(
		'https://console.ferdinand.email',
		window.location.origin
	  )
      codeSnippet.innerHTML = await codeToHtml(code, {
        lang,
        theme: 'monokai'
      })
    }
  	</script>
	<script>
  	function getClass(value, selectedLanguage) {
		if (value === selectedLanguage) {
			return 'py-3 text-sm text-ferdinand-300 border-b border-ferdinand-500 cursor-pointer'
		}
		return 'text-zinc-400 text-sm hover:text-zinc-300 transition-colors cursor-pointer'
	}
  	</script>
	<div
		class="border border-zinc-700 rounded-xl w-full bg-zinc-900 text-white max-w-5xl mt-6"
		id="emails-code"
		x-data="{ selectedLanguage: 'shellscript' }"
		data-user-email={ util.RetrieveUser(ctx).Email }
	>
		<div class="px-4 flex space-x-4 border-b border-zinc-700">
			<button
				x-bind:class="getClass('shellscript', selectedLanguage)"
				x-on:click="selectedLanguage = 'shellscript'"
			>
				cURL
			</button>
			<button
				x-bind:class="getClass('python', selectedLanguage)"
				x-on:click="selectedLanguage = 'python'"
			>
				Python
			</button>
			<button
				x-bind:class="getClass('typescript', selectedLanguage)"
				x-on:click="selectedLanguage = 'typescript'"
			>
				Node.js
			</button>
			<button
				x-bind:class="getClass('go', selectedLanguage)"
				x-on:click="selectedLanguage = 'go'"
			>
				Go
			</button>
			<button
				x-bind:class="getClass('php', selectedLanguage)"
				x-on:click="selectedLanguage = 'php'"
			>
				PHP
			</button>
		</div>
		<div
			class="rounded-b-xl overflow-auto leading-6 text-sm sm:text-sm min-h-72 h-72 max-h-72"
			style="color: rgb(70, 74, 77); transform: none; background: black !important;"
		>
			<code
				x-show="selectedLanguage === 'shellscript'"
				class="block p-4 !bg-white/2.5 w-full h-full [&>pre]:!bg-transparent"
				id="code-snippet"
				data-lang="shellscript"
			></code>
			<code
				x-show="selectedLanguage === 'python'"
				class="block p-4 !bg-white/2.5 w-full h-full [&>pre]:!bg-transparent"
				id="code-snippet"
				data-lang="python"
			></code>
			<code
				x-show="selectedLanguage === 'typescript'"
				class="block p-4 !bg-white/2.5 w-full h-full [&>pre]:!bg-transparent"
				id="code-snippet"
				data-lang="typescript"
			></code>
			<code
				x-show="selectedLanguage === 'go'"
				class="block p-4 !bg-white/2.5 w-full h-full [&>pre]:!bg-transparent"
				id="code-snippet"
				data-lang="go"
			></code>
			<code
				x-show="selectedLanguage === 'php'"
				class="block p-4 !bg-white/2.5 w-full h-full [&>pre]:!bg-transparent"
				id="code-snippet"
				data-lang="php"
			></code>
		</div>
	</div>
}
